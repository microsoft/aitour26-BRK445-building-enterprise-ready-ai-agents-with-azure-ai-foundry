#pragma warning disable SKEXP0110

using Microsoft.AspNetCore.Mvc;
using Microsoft.Agents.AI;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.ChatCompletion;
using SharedEntities;
using System.Text;
using ZavaAIFoundrySKAgentsProvider;
using ZavaAgentFxAgentsProvider;

namespace AgentsCatalogService.Controllers;

[ApiController]
[Route("api")]
public class AgentCatalogController : ControllerBase
{
    private readonly ILogger<AgentCatalogController> _logger;
    private readonly AIFoundryAgentProvider _aIFoundryAgentProvider;
    private readonly AgentFxAgentProvider _agentFxAgentProvider;

    public AgentCatalogController(
        ILogger<AgentCatalogController> logger,
        AIFoundryAgentProvider aIFoundryAgentProvider,
        AgentFxAgentProvider agentFxAgentProvider)
    {
        _logger = logger;
        _aIFoundryAgentProvider = aIFoundryAgentProvider;
        _agentFxAgentProvider = agentFxAgentProvider;
    }

    [HttpGet("agents")]
    public ActionResult<AgentListResponse> GetAvailableAgents()
    {
        try
        {
            _logger.LogInformation("Fetching available agents");

            var agents = new AgentListResponse
            {
                Agents = AgentCatalog.Agents.ToArray()
            };

            return Ok(agents);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching available agents");
            return StatusCode(500, "Error fetching available agents");
        }
    }

    [HttpPost("testsk")]
    public async Task<ActionResult<AgentTesterResponse>> TestAgentSkAsync([FromBody] AgentTesterRequest request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("[SK] Testing agent {AgentId} with question: {Question}", request.AgentId, request.Question);

        return await TestAgentAsync(
            request,
            InvokeSemanticKernelAsync,
            "[SK]",
            cancellationToken);
    }

    [HttpPost("testagentfx")]
    public async Task<ActionResult<AgentTesterResponse>> TestAgentFxAsync([FromBody] AgentTesterRequest request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("[AgentFx] Testing agent {AgentId} with question: {Question}", request.AgentId, request.Question);

        return await TestAgentAsync(
            request,
            InvokeAgentFrameworkAsync,
            "[AgentFx]",
            cancellationToken);
    }

    private async Task<ActionResult<AgentTesterResponse>> TestAgentAsync(
        AgentTesterRequest request,
        Func<string, string, CancellationToken, Task<string>> invokeAgentAsync,
        string logPrefix,
        CancellationToken cancellationToken)
    {
        var agentId = request.AgentId;
        var question = request.Question;

        try
        {
            var prompt = BuildTestPrompt(agentId, question);
            var agentResponse = await invokeAgentAsync(agentId, prompt, cancellationToken);
            _logger.LogInformation("{Prefix} Raw agent response length: {Length}", logPrefix, agentResponse.Length);

            var hasResponse = !string.IsNullOrWhiteSpace(agentResponse);
            var finalResponse = hasResponse
                ? agentResponse
                : GenerateFallbackResponse(agentId, question);

            if (!hasResponse)
            {
                _logger.LogWarning("{Prefix} Empty response from agent. Using fallback message.", logPrefix);
            }

            var agentTesterResponse = new AgentTesterResponse
            {
                AgentId = agentId,
                AgentName = AgentCatalog.GetAgentName(agentId),
                Question = question,
                Response = finalResponse,
                Timestamp = DateTime.UtcNow,
                IsSuccessful = hasResponse,
                ErrorMessage = hasResponse ? null : "No response generated by the agent."
            };

            _logger.LogInformation("{Prefix} Agent response delivered.", logPrefix);
            return Ok(agentTesterResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "{Prefix} Error testing agent {AgentId}", logPrefix, agentId);

            return Ok(new AgentTesterResponse
            {
                AgentId = agentId,
                AgentName = AgentCatalog.GetAgentName(agentId),
                Question = question,
                Response = $"Error occurred while processing your question: {ex.Message}",
                Timestamp = DateTime.UtcNow,
                IsSuccessful = false,
                ErrorMessage = ex.Message
            });
        }
    }

    private async Task<string> InvokeSemanticKernelAsync(string agentId, string prompt, CancellationToken cancellationToken)
    {
        var agent = await _aIFoundryAgentProvider.CreateAzureAIAgentAsync(agentId);
        AzureAIAgentThread agentThread = new(agent.Client);

        var sb = new StringBuilder();
        ChatMessageContent message = new(AuthorRole.User, prompt);
        await foreach (ChatMessageContent response in agent.InvokeAsync(message, agentThread).WithCancellation(cancellationToken))
        {
            sb.Append(response.Content);
        }

        return sb.ToString();
    }

    private async Task<string> InvokeAgentFrameworkAsync(string agentId, string prompt, CancellationToken cancellationToken)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var agent = await _agentFxAgentProvider.GetAIAgentAsync(agentId);
        var thread = agent.GetNewThread();
        var response = await agent.RunAsync(prompt, thread);
        return response?.Text ?? string.Empty;
    }

    private string BuildTestPrompt(string agentId, string question)
    {
        return $@"
You are a helpful AI assistant specializing in DIY projects and tool recommendations.
Agent Type: {AgentCatalog.GetAgentName(agentId)}
User Question: {question}

Please provide a helpful and informative response based on your expertise.
Keep the response concise but thorough, and be encouraging while maintaining safety awareness.
";
    }

    private string GenerateFallbackResponse(string agentId, string question)
    {
        var agentName = AgentCatalog.GetAgentName(agentId);
        var agent = AgentCatalog.GetAgent(agentId);

        if (agent != null)
        {
            return $"Hello! I'm the {agentName}. You asked: '{question}'. " +
                   $"{agent.Description}. " +
                   "How can I assist you further with your request?";
        }

        return $"Hello! I'm an AI assistant. You asked: '{question}'. " +
               "How can I help you with your DIY project today?";
    }
}