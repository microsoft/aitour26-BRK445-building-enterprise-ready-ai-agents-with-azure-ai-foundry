@page "/scenario2-multi-agent"
@using Store.Models
@using Store.Services
@using SharedEntities
@inject MultiAgentService MultiAgentService
@inject ILogger<Scenario2MultiAgent> Logger

@attribute [StreamRendering(true)]
@rendermode InteractiveServer


@inject AgentFrameworkService AgentFrameworkService

<PageTitle>Zava Store - Multi-Agent Orchestration</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <div class="alert alert-info d-flex align-items-center" role="alert">
                <span class="bi bi-info-circle me-2"></span>
                <div>
                    <strong>Current Working Mode:</strong> @currentFramework
                    <small class="ms-2 text-muted">
                        @(currentFramework == "SK" ? "(Semantic Kernel)" : "(Microsoft Agent Framework)")
                    </small>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-question-circle me-2"></span>
                        Ask a Question
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Orchestration image preview -->
                    <div class="mb-3 text-center">
                        <img src="@GetOrchestrationImagePath(multiAgentRequest.OrchestationType)" alt="Orchestration preview" class="img-fluid orchestration-preview rounded shadow-sm" />
                        <div class="form-text mt-2">Preview of the selected orchestration visual</div>
                    </div>
                    <!-- Question textarea at the top -->
                    <div class="mb-3">
                        <label for="customerQuestion" class="form-label">Your Question</label>
                        <div class="input-group">
                            <InputTextArea @bind-Value="multiAgentRequest.ProductQuery" class="form-control" id="customerQuestion" rows="3" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <button type="button" class="btn btn-outline-secondary" @onclick="SetDefaultProductQuery">Set Sample Question</button>
                        </div>
                        <div class="form-text">Example: "I can't find the paint sprayer ABC, I'm in this store, can you help?"</div>
                    </div>

                    <!-- Orchestration Type Selection -->
                    <div class="mb-3">
                        <label for="orchestrationType" class="form-label">Agent Orchestration Type</label>
                        <InputSelect @bind-Value="multiAgentRequest.OrchestationType" class="form-select" id="orchestrationType">
                            <option value="@OrchestrationType.Default">Default</option>
                            <option value="@OrchestrationType.Sequential">Sequential - Step-by-step workflow</option>
                            <option value="@OrchestrationType.Concurrent">Concurrent - Parallel analysis</option>
                            <option value="@OrchestrationType.Handoff">Handoff - Dynamic routing</option>
                            <option value="@OrchestrationType.GroupChat">Group Chat - Collaborative discussion</option>
                            <option value="@OrchestrationType.GroupChat">Magentic - Complex collaboration</option>
                        </InputSelect>
                        <div class="form-text">@GetOrchestrationDescription(multiAgentRequest.OrchestationType)</div>
                    </div>

                    <!-- Primary action button under question -->
                    <div class="mb-3">
                        <button id="btnStartMultiAgent" type="button" class="btn btn-primary w-100" @onclick="SubmitRequest" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span class="bi bi-robot me-2"></span>
                                <span>Ask Agents for Help</span>
                            }
                        </button>
                    </div>

                    <!-- Optional fields moved below -->
                    <div class="mb-3">
                        <label for="projectImage" class="form-label">Photo <small class="text-muted">(optional)</small></label>
                        <InputFile OnChange="@OnImageSelected" class="form-control" id="projectImage" accept="image/*" />
                        <div class="form-text">Optional: upload a photo to help identify the product.</div>
                    </div>

                    <div class="mb-3">
                        <label for="userId" class="form-label">User ID <small class="text-muted">(optional)</small></label>
                        <InputText @bind-Value="multiAgentRequest.UserId" class="form-control" id="userId" placeholder="e.g., 1" />
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked disabled />
                            <label class="form-check-label">Include my location for navigation (always on for this demo)</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Current Location (sample)</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <InputNumber @bind-Value="latitude" class="form-control" placeholder="Latitude" step="0.0001" />
                            </div>
                            <div class="col-6">
                                <InputNumber @bind-Value="longitude" class="form-control" placeholder="Longitude" step="0.0001" />
                            </div>
                        </div>
                        <div class="form-text">
                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="UseDefaultLocation">Use Sample Location</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            @if (orchestrationResult != null)
            {
                <div class="row g-3">
                    <!-- Result banner showing orchestration image -->
                    <div class="col-12">
                        <div class="card mb-3 result-banner">
                            <div class="row g-0 align-items-center">
                                <div class="col p-3">
                                    <h5 class="mb-0">@orchestrationResult.OrchestationType Agent Orchestration</h5>
                                    <small class="text-muted">Orchestration ID: @orchestrationResult.OrchestrationId</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Product Alternatives -->
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <span class="bi bi-box-seam me-2"></span>
                                    Product Alternatives
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row g-3">
                                    @foreach (var product in orchestrationResult.Alternatives)
                                    {
                                        <div class="col-md-4">
                                            <div class="card h-100">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                                        <h6 class="card-title mb-0">@product.Name</h6>
                                                        <span class="badge @(product.InStock ? "bg-success" : "bg-danger")">
                                                            @(product.InStock ? "In Stock" : "Out of Stock")
                                                        </span>
                                                    </div>
                                                    <p class="card-text">
                                                        <small class="text-muted">SKU: @product.Sku</small><br>
                                                        <strong class="text-primary">$@product.Price.ToString("F2")</strong>
                                                    </p>
                                                    <div class="mt-auto">
                                                        <small class="text-muted">
                                                            <span class="bi bi-geo-alt me-1"></span>
                                                            @product.Location, Section @product.Price.ToString("F2")
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Navigation Instructions -->
                    @if (orchestrationResult.NavigationInstructions != null)
                    {
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">
                                        <span class="bi bi-signpost me-2"></span>
                                        In-Store Navigation
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <strong>From:</strong> @orchestrationResult.NavigationInstructions.StartLocation<br>
                                        <strong>Estimated Time:</strong>
                                        @orchestrationResult.NavigationInstructions.EstimatedTime
                                    </div>

                                    <div class="navigation-steps">
                                        @for (int i = 0; i < orchestrationResult.NavigationInstructions.Steps.Length; i++)
                                        {
                                            var step = orchestrationResult.NavigationInstructions.Steps[i];
                                            <div class="d-flex mb-2">
                                                <div class="flex-shrink-0">
                                                    <span class="badge bg-primary rounded-circle">@(i + 1)</span>
                                                </div>
                                                <div class="flex-grow-1 ms-3">
                                                    <strong>@step.Direction</strong> - @step.Description
                                                    @{
                                                        var landmarkText = step.Landmark?.ToString();
                                                    }
                                                    @if (!string.IsNullOrEmpty(landmarkText))
                                                    {
                                                        <br />
                                                        <small class="text-muted">Landmark: @landmarkText</small>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                

                                        <!-- Mermaid Workflow Viewer -->
                    @if (!string.IsNullOrEmpty(orchestrationResult.MermaidWorkflowRepresentation))
                    {
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header" @onclick="ToggleMermaidViewer" style="cursor: pointer;">
                                    <h5 class="card-title mb-0">
                                        <span class="bi @(showMermaidViewer ? "bi-chevron-down" : "bi-chevron-right") me-2"></span>
                                        <span class="bi bi-diagram-3 me-2"></span>
                                        Workflow Diagram
                                        <small class="text-muted">(Click to @(showMermaidViewer ? "collapse" : "expand"))</small>
                                    </h5>
                                </div>
                                @if (showMermaidViewer)
                                {
                                    <div class="card-body">
                                        <div class="mermaid-container">
                                            @* <pre class="mermaid">@orchestrationResult.MermaidWorkflowRepresentation</pre> *@
                                            <MermaidDiagram Definition="@orchestrationResult.MermaidWorkflowRepresentation" />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }


                    <!-- Agent Steps -->
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <span class="bi bi-diagram-3 me-2"></span>
                                    @orchestrationResult.OrchestationType Agent Orchestration
                                    <small class="text-muted ms-2">ID: @orchestrationResult.OrchestrationId</small>
                                </h5>
                                @if (orchestrationResult.NavigationInstructions != null)
                    {

#line default
#line hidden
#nullable disable

            __builder.OpenElement(239, "div");
            __builder.AddAttribute(240, "class", "col-12");
            __builder.OpenElement(241, "div");
            __builder.AddAttribute(242, "class", "card");
            __builder.AddMarkupContent(243, "<div class=\"card-header\"><h5 class=\"card-title mb-0\"><span class=\"bi bi-signpost me-2\"></span>\r\n                                        In-Store Navigation\r\n                                    </h5></div>\r\n                                ");
            __builder.OpenElement(244, "div");
            __builder.AddAttribute(245, "class", "card-body");
            __builder.OpenElement(246, "div");
            __builder.AddAttribute(247, "class", "mb-3");
            __builder.AddMarkupContent(248, "<strong>From:</strong> ");
#nullable restore
#line (195,65)-(195,121) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(249, orchestrationResult.NavigationInstructions.StartLocation

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(250, "<br>\r\n                                        ");
            __builder.AddMarkupContent(251, "<strong>Estimated Time:</strong>\r\n                                        ");
#nullable restore
#line (197,42)-(197,98) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(252, orchestrationResult.NavigationInstructions.EstimatedTime

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(253, "\r\n\r\n                                    ");
            __builder.OpenElement(254, "div");
            __builder.AddAttribute(255, "class", "navigation-steps");
#nullable restore
#line (201,1)-(201,41) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                                        

#line default
#line hidden
#nullable disable

#nullable restore
#line (201,42)-(204,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
for (int i = 0; i < orchestrationResult.NavigationInstructions.Steps.Length; i++)
                                        {
                                            var step = orchestrationResult.NavigationInstructions.Steps[i];

#line default
#line hidden
#nullable disable

            __builder.OpenElement(256, "div");
            __builder.AddAttribute(257, "class", "d-flex mb-2");
            __builder.OpenElement(258, "div");
            __builder.AddAttribute(259, "class", "flex-shrink-0");
            __builder.OpenElement(260, "span");
            __builder.AddAttribute(261, "class", "badge bg-primary rounded-circle");
#nullable restore
#line (206,101)-(206,106) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(262, i + 1

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(263, "\r\n                                                ");
            __builder.OpenElement(264, "div");
            __builder.AddAttribute(265, "class", "flex-grow-1 ms-3");
            __builder.OpenElement(266, "strong");
#nullable restore
#line (209,62)-(209,76) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(267, step.Direction

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddContent(268, " - ");
#nullable restore
#line (209,89)-(209,105) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(269, step.Description

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line (210,1)-(210,53) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                                                    

#line default
#line hidden
#nullable disable

#nullable restore
#line (210,55)-(212,53) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"

                                                        var landmarkText = step.Landmark?.ToString();
                                                    

#line default
#line hidden
#nullable disable

#nullable restore
#line (213,1)-(213,53) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                                                    

#line default
#line hidden
#nullable disable

#nullable restore
#line (213,54)-(215,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
if (!string.IsNullOrEmpty(landmarkText))
                                                    {

#line default
#line hidden
#nullable disable

            __builder.AddMarkupContent(270, "<br>\r\n                                                        ");
            __builder.OpenElement(271, "small");
            __builder.AddAttribute(272, "class", "text-muted");
            __builder.AddContent(273, "Landmark: ");
#nullable restore
#line (216,94)-(216,106) 26 "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
__builder.AddContent(274, landmarkText

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line (217,1)-(218,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                                                    }

#line default
#line hidden
#nullable disable

            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line (220,1)-(221,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                                        }

#line default
#line hidden
#nullable disable

            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line (225,1)-(226,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                    }

#line default
#line hidden
#nullable disable

#nullable restore
#line (229,1)-(229,21) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
                    

#line default
#line hidden
#nullable disable

#nullable restore
#line (229,22)-(231,1) "D:\elbruno\aitour26-BRK445-building-enterprise-ready-ai-agents-with-azure-ai-foundry\src\Store\Components\Pages\Scenario2MultiAgent.razor"
if (!string.IsNullOrEmpty(orchestrationResult.MermaidWorkflowRepresentation))
                    {
                                    <p class="mb-0 mt-2 text-muted">
                                        <small>@orchestrationResult.OrchestrationDescription</small>
                                    </p>
                                }
                            </div>
                            <div class="card-body">
                                <div class="timeline">
                                    @foreach (var step in orchestrationResult.Steps)
                                    {
                                        <div class="timeline-item mb-3">
                                            <div class="d-flex">
                                                <div class="flex-shrink-0">
                                                    <span class="badge @GetAgentBadgeClass(step.Agent) rounded-pill">
                                                        @step.Agent
                                                    </span>
                                                </div>
                                                <div class="flex-grow-1 ms-3">
                                                    <h6 class="mb-1">@step.Action</h6>
                                                    <p class="mb-1 text-muted">@step.Result</p>
                                                    <small class="text-muted">@step.Timestamp.ToString("HH:mm:ss")</small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <h6 class="alert-heading">
                        <span class="bi bi-exclamation-triangle me-2"></span>
                        Error
                    </h6>
                    @errorMessage
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center text-muted">
                        <span class="bi bi-robot display-1 d-block mb-3"></span>
                        <p>Enter your question to see multiple AI agents working together to find products, alternatives, and navigation.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .timeline-item {
        position: relative;
    }

        .timeline-item:not(:last-child)::after {
            content: '';
            position: absolute;
            left: 12px;
            top: 50px;
            width: 2px;
            height: calc(100% - 20px);
            background-color: #dee2e6;
        }

    .navigation-steps .badge {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .orchestration-preview {
        max-height: 160px;
        width: auto;
    }

    .result-banner {
        background: linear-gradient(90deg, rgba(255,255,255,0.9), rgba(248,249,250,0.9));
        border: 1px solid #e9ecef;
    }

    .result-image {
        border-radius: 8px;
    }

    .mermaid-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        overflow-x: auto;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
<script>
    mermaid.initialize({ startOnLoad: true, theme: 'default' });
</script>

@code {
    private MultiAgentRequestModel multiAgentRequest = new() { UserId = "1" };
    private MultiAgentResponse? orchestrationResult;
    private IBrowserFile? selectedFile;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private bool includeLocation = true;
    private double latitude = 47.6062;
    private double longitude = -122.3321;
    private const string DefaultProductQuery = "I can't find the product 'Paint Sprayer - TurboSpray 750', I'm in this store, can you help?";
    private bool showMermaidViewer = false;
    private string currentFramework = "SK";
    
    protected override async Task OnInitializedAsync()
    {
        currentFramework = await AgentFrameworkService.GetSelectedFrameworkAsync();
    }
    
    private void ToggleMermaidViewer()
    {
        showMermaidViewer = !showMermaidViewer;
    }

    private void OnImageSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        multiAgentRequest.Image = selectedFile;
        errorMessage = string.Empty;
    }

    private void UseDefaultLocation()
    {
        latitude = 47.6062;
        longitude = -122.3321; // Seattle coordinates as example
    }

    private void SetDefaultProductQuery()
    {
        multiAgentRequest.ProductQuery = DefaultProductQuery;
        StateHasChanged();
    }

    private string GetOrchestrationDescription(OrchestrationType orchestrationType)
    {
        return orchestrationType switch
        {
            OrchestrationType.Default => "Agents execute in specific order to solve the problem.",
            OrchestrationType.Sequential => "Agents execute one after another, each building on the previous agent's results.",
            OrchestrationType.Concurrent => "All agents work simultaneously in parallel, providing independent analysis.",
            OrchestrationType.Handoff => "Agents dynamically pass control based on context and business rules.",
            OrchestrationType.GroupChat => "Agents collaborate in a group discussion coordinated by a manager.",
            OrchestrationType.Magentic => "Complex multi-agent collaboration inspired by MagenticOne framework.",
            _ => "Choose how agents should work together to solve your query."
        };
    }

    private string GetAgentBadgeClass(string agentName)
    {
        return agentName switch
        {
            "InventoryAgent" => "bg-primary",
            "MatchmakingAgent" => "bg-success",
            "LocationAgent" => "bg-info",
            "NavigationAgent" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetOrchestrationImagePath(OrchestrationType orchestrationType)
    {
        // Images are expected under wwwroot/images/multiagentorchestration
        var basePath = "/images/multiagentorchestration/";
        return orchestrationType switch
        {
            OrchestrationType.Default => basePath + "default.png",
            OrchestrationType.Sequential => basePath + "sequential.png",
            OrchestrationType.Concurrent => basePath + "concurrent.png",
            OrchestrationType.Handoff => basePath + "handoff.png",
            OrchestrationType.GroupChat => basePath + "groupchat.png",
            OrchestrationType.Magentic => basePath + "magentic.png",
            _ => basePath + "default.png",
        };
    }

    private async Task SubmitRequest()
    {
        // Validate inputs similar to Scenario1SingleAgent
        if (string.IsNullOrWhiteSpace(multiAgentRequest.ProductQuery))
        {
            errorMessage = "Please provide a product search query.";
            return;
        }

        if (string.IsNullOrWhiteSpace(multiAgentRequest.UserId))
        {
            errorMessage = "Please provide a user ID.";
            return;
        }

        isSubmitting = true;
        errorMessage = string.Empty;
        orchestrationResult = null;

        try
        {
            // Attach image if selected
            multiAgentRequest.Image = selectedFile;

            // Set location if included
            if (includeLocation && (latitude != 0.0 || longitude != 0.0))
            {
                multiAgentRequest.Location = new Location { Lat = latitude, Lon = longitude };
            }
            else
            {
                multiAgentRequest.Location = null;
            }

            var sharedRequest = await multiAgentRequest.ToSharedEntityAsync();
            orchestrationResult = await MultiAgentService.AssistAsync(sharedRequest);

            if (orchestrationResult == null)
            {
                errorMessage = "Multi-agent service is currently unavailable. Please try again later.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error calling multi-agent service");
            errorMessage = "An error occurred while processing your request. Please try again.";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}