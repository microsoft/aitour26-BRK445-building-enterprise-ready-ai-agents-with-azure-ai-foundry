@page "/settings"
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Settings - Zava Store</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <span class="bi bi-gear me-2"></span>
                Settings
            </h1>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8 col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-robot me-2"></span>
                        Agent Framework Selection
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">
                        Choose which agent framework to use for the demos. All frameworks connect to Azure AI Foundry services.
                    </p>

                    <div class="mb-4">
                        <label class="form-label"><strong>Select Framework:</strong></label>
                        <select class="form-select" @bind="selectedFramework" @bind:after="OnFrameworkChanged">
                            <option value="llm">LLM Direct Call</option>
                            <option value="sk">Semantic Kernel (SK)</option>
                            <option value="agentfx">Microsoft Agent Framework (AgentFx)</option>
                        </select>
                        <small class="text-muted mt-2 d-block">
                            @GetFrameworkDescription()
                        </small>
                    </div>

                    <div class="alert alert-info" role="alert">
                        <span class="bi bi-info-circle me-2"></span>
                        <strong>Current Selection:</strong> @GetFrameworkDisplayName()
                    </div>

                    @if (showSavedMessage)
                    {
                        <div class="alert alert-success" role="alert">
                            <span class="bi bi-check-circle me-2"></span>
                            Settings saved! The new framework will be used for all agent demos.
                        </div>
                    }

                    <hr />

                    <h6 class="mb-3">Framework Comparison</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Framework</th>
                                    <th>Status</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="@(selectedFramework == "llm" ? "table-primary" : "")">
                                    <td><strong>LLM Direct Call</strong></td>
                                    <td>
                                        @if (selectedFramework == "llm")
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>Direct LLM calls using Microsoft.Extensions.AI</td>
                                </tr>
                                <tr class="@(selectedFramework == "sk" ? "table-primary" : "")">
                                    <td><strong>Semantic Kernel</strong></td>
                                    <td>
                                        @if (selectedFramework == "sk")
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>Framework using Microsoft.SemanticKernel</td>
                                </tr>
                                <tr class="@(selectedFramework == "agentfx" ? "table-primary" : "")">
                                    <td><strong>Microsoft Agent Framework</strong></td>
                                    <td>
                                        @if (selectedFramework == "agentfx")
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }
                                    </td>
                                    <td>Framework using Microsoft.Agents.AI</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedFramework = "agentfx";
    private bool showSavedMessage = false;

    protected override async Task OnInitializedAsync()
    {
        // Load saved preference from localStorage
        try
        {
            var savedFramework = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "agentFramework");
            selectedFramework = string.IsNullOrEmpty(savedFramework) ? "agentfx" : savedFramework.ToLowerInvariant();
        }
        catch
        {
            // Default to AgentFx if localStorage is not available
            selectedFramework = "agentfx";
        }
    }

    private async Task OnFrameworkChanged()
    {
        // Save to localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "agentFramework", selectedFramework);
        
        // Show saved message
        showSavedMessage = true;
        StateHasChanged();
        
        // Hide message after 3 seconds
        await Task.Delay(3000);
        showSavedMessage = false;
        StateHasChanged();
    }

    private string GetFrameworkDisplayName()
    {
        return selectedFramework switch
        {
            "llm" => "LLM Direct Call",
            "sk" => "Semantic Kernel (SK)",
            "agentfx" => "Microsoft Agent Framework (AgentFx)",
            _ => "Unknown"
        };
    }

    private string GetFrameworkDescription()
    {
        return selectedFramework switch
        {
            "llm" => "Using direct LLM calls - Direct interaction with language models using Microsoft.Extensions.AI IChatClient",
            "sk" => "Using Semantic Kernel - Framework for AI orchestration with Microsoft.SemanticKernel",
            "agentfx" => "Using Microsoft Agent Framework - Framework for building AI agents with Microsoft.Agents.AI",
            _ => "Unknown framework"
        };
    }
}
